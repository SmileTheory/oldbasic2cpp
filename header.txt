#include <iostream>
#include <string>
#include <cmath>
#include <ctime>

using namespace std;

////////////////////////////////////////////////////////////////////////////////
// below from "A small noncryptographic PRNG"
// http://burtleburtle.net/bob/rand/smallprng.html

typedef uint32_t u4;
typedef struct ranctx { u4 a; u4 b; u4 c; u4 d; } ranctx;

#define rot(x,k) (((x)<<(k))|((x)>>(32-(k))))
u4 ranval( ranctx *x ) {
	u4 e = x->a - rot(x->b, 27);
	x->a = x->b ^ rot(x->c, 17);
	x->b = x->c + x->d;
	x->c = x->d + e;
	x->d = e + x->a;
	return x->d;
}

void raninit( ranctx *x, u4 seed ) {
	u4 i;
	x->a = 0xf1ea5eed, x->b = x->c = x->d = seed;
	for (i=0; i<20; ++i) {
		(void)ranval(x);
	}
}

////////////////////////////////////////////////////////////////////////////////

ranctx rstate;

float b_RND(double R)
{
	u4 val;

	if (R == 0)
		val = rstate.d;
	else
		val = ranval(&rstate);

	return (val >> 8) * (1. / (1 << 24));
}

const string b_LEFT(const string& s, int len)
{
	return s.substr(0, len);
}

const string b_MID(const string& s, int pos, int len)
{
	return s.substr(pos - 1, len);
}

const string b_RIGHT(const string& s, int len)
{
	return s.substr(s.length() - len, len);
}

int b_LEN(const string& s)
{
	return s.length();
}

string b_TAB(int len)
{
	return string(len, ' ');
}

string b_STR(int num)
{
	return to_string(num);
}

int main(int argc, char *argv[]) {
	raninit(&rstate, (u4)time(NULL));
